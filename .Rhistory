q()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
install.packages("manipulate")
y
library("ggplot2", lib.loc="C:/Program Files/R/R-3.2.2/library")
install.packages("ggplot2")
install.packages(c("foreign", "nlme"))
library("ggplot2", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:ggplot2", unload=TRUE)
install.packages("ggplot2")
library(ggplot2)
library("ggplot2", lib.loc="C:/Program Files/R/R-3.2.2/library")
Agreater50 <- function(HRVector,threshold){
count <- 0
for(i in 1:3){
count = count + ifelse(HRVector[i] > threshold, 1, 0)
}
fifty <- count/length(HRVector) >= .5
return(fifty)
}
Bgreater50 <- function(HRVector,threshold){
fifty <- HRVector > threshold
return(fifty)
}
Cgreater50 <- function(){
count <- 0
for(i in 1:length(HRVector)){
count = count + ifelse(HRVector[i] > threshold, 1, 0)
}
fifty <- count/length(HRVector) >= .5
return(fifty)
}
Dgreater50 <- function(HRVector,threshold){
count <- 0
for(i in 1:length(HRVector)){
count = count + ifelse(HRVector[i] > threshold, 1, 0)
}
fifty <- count/length(HRVector) >= .5
return(fifty)
}
#greater50(c(10,15,20),14) should return TRUE,
#while greater50(c(10,14,20),14) should return FALSE
Agreater50(c(10,15,20),14)
Bgreater50(c(10,15,20),14)
Cgreater50(c(10,15,20),14)
Dgreater50(c(10,15,20),14)
Agreater50(c(10,14,20),14)
Bgreater50(c(10,14,20),14)
Cgreater50(c(10,14,20),14)
Dgreater50(c(10,14,20),14)
HRVector <- c(10,15,20)
threshold = 14
Agreater50(HRVector, threshold)
Bgreater50(HRVector, threshold)
Cgreater50()
Dgreater50(HRVector, threshold)
HRVector <- c(10,14,20)
Agreater50(HRVector, threshold)
Bgreater50(HRVector, threshold)
Cgreater50()
Dgreater50(HRVector, threshold)
Agreater50 <- function(HRVector,threshold){
count <- 0
for(i in 1:3){
count = count + ifelse(HRVector[i] > threshold, 1, 0)
}
fifty <- count/length(HRVector) >= .5
x <- matrix(rnorm(30, 1), ncol = 5)
y <- c(1, seq(5))
x <- cbind(x, y)
View(x)
View(x)
find.package("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find.package("devtools")
installed.packages("devtools")
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find.package("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
1
5+7
x <- 5+7
x
y<-x - 3
y
z<- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
swirl()
x<- 0:6
x
class(x)
as.numeric(x)
as.logical(x)
x
as.character(x)
y<-data.frame(a=1, b="a")
dput(y)
dput(y,file="y.R")
new.y<-dget("y.R")
new.y
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir"")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path(folder1, folder2)
file.path('folder1', 'folder2')
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
num_vect<-c(0.5, 55, -10, 6)
tf<- num_vect<1
tf
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Mike")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = " ")
paste(C(1:3), c("X","Y","Z"), sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(5)
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("My", "name", "is", "Mike")
submit()
mad_libs(place="Sydney", adjective="hot", noun="football")
submit()
'I' %p% 'love' %p% 'R'
'I' %p% 'love' %p% 'R!'
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
print(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
iris
split(iris, iris$Species)
s<-split(iris,iris$Species)
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
?gl
head(airquality)
s1 <- split(airquality, airquality$Month)
lapply(s1, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Length", "Sepal.Width", "Petal.Length")]))
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
rowMeans(iris[, 1:4])
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
debug(ls)
ls()
tapply(mtcars$hp, mtcars$cyl, mean)
?list
setwd("D:/Coursera/R Programming/Assignment02/ProgrammingAssignment2")
?NUMERIC
numeric
?numeric
x <-matrix()
x$dim
attributes(x)
x <- 1:10
x
x <- matrix(1:4,2,2)
y <-solve(x)
z <- x*y
z
y
x
z <- x%*%y
z
source("cachematrix.R")
makeCacheMatrix(x)
cacheSolve(x)
source(1:10)
source("SpecialVector.R")
v1 <- 1:10
makeVector(V1)
cachemean(v1)
a <- makeVector(c(1,2,3,4))
a
a$get()
a$getmean()
cachemean()
cachemean(a)
a$getmean()
cachemean(a)
a$set(c(10,20,30,40))
a$getmean()
cachemean(a)
cachemean(a)
a$get()
a$setmean(0)
a$get()
cachemean(a)
a <- makeVector(c(5, 25, 125, 625))
a$get()
cachemean(a)
cachemean(a)
x
a1 <- makeCacheMatrix(x)
a1$get()
a1$getinverse()
cacheSolve(a1)
source("Crazy.R")
x <- 0
crazy(0)
source("Crazy.R")
source("Crazy.R")
crazy(0)
x<- 0
crazy(0)
x<- 0
crazy(0)
x<- 0
crazy(0)
crazy()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
crazy <- function() {
b<-42
b<<-3.14
print(b)
}
b<-0
b
crazy()
b
amatrix = makeCacheMatrix(matrix(c(5,6,7,8), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
